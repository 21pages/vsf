; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_thread_simple.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_thread_simple.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I.\RTE\Device\CMSDK_CM3 -I.\RTE\_tempalte_armv7-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM3\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM3 --enum_is_int --wchar32 --omf_browse=.\out\main_thread_simple.crf ..\..\usrapp\template\main_thread_simple.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;89     #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;90     int main(void)
000000  f7fffffe          BL       vsf_stdio_init
;;;91     {
;;;92         vsf_stdio_init();
;;;93         
;;;94         vsf_kernel_thread_simple_demo();
000004  f7fffffe          BL       vsf_kernel_thread_simple_demo
;;;95         
;;;96         while(1);
;;;97     }
;;;98     
                          ENDP


                          AREA ||i.vsf_kernel_thread_simple_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_thread_simple_demo PROC
;;;56     
;;;57     void vsf_kernel_thread_simple_demo(void)
000000  f64772ff          MOV      r2,#0x7fff
;;;58     {
;;;59         static_task_instance(
;;;60             features_used(
;;;61                 mem_sharable( )
;;;62                 mem_nonsharable( )
;;;63             )
;;;64         )
;;;65         
;;;66         //! initialise semaphore
;;;67         vsf_sem_init(&user_sem, 0); 
000004  2100              MOVS     r1,#0
000006  480d              LDR      r0,|L2.60|
000008  f7fffffe          BL       vsf_eda_sync_init
;;;68         
;;;69         //! start a user task
;;;70         do {
;;;71             static NO_INIT user_thread_t __user_task;
;;;72     #if __IS_COMPILER_ARM_COMPILER_5__
;;;73             __user_task.use_as__vsf_thread_user_thread_t_t.psem = &user_sem;
00000c  480b              LDR      r0,|L2.60|
00000e  f5a07118          SUB      r1,r0,#0x260
;;;74     #else
;;;75             __user_task.psem = &user_sem;
;;;76     #endif
;;;77             init_vsf_thread(user_thread_t, &__user_task, vsf_priority_0);
000012  f8c1025c          STR      r0,[r1,#0x25c]  ; __user_task
000016  2100              MOVS     r1,#0
000018  f5a07018          SUB      r0,r0,#0x260
00001c  f7fffffe          BL       vsf_thread_user_thread_t_start
;;;78         } while(0);
;;;79     
;;;80         
;;;81         while(1) {
;;;82             printf("hello world! \r\n");
;;;83             vsf_delay_ms(1000);
000020  f44f747a          MOV      r4,#0x3e8
                  |L2.36|
000024  a006              ADR      r0,|L2.64|
000026  f7fffffe          BL       __2printf
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       vsf_systimer_ms_to_tick
000030  f7fffffe          BL       __vsf_delay
;;;84             vsf_sem_post(&user_sem);            //!< post a semaphore
000034  4801              LDR      r0,|L2.60|
000036  f7fffffe          BL       vsf_eda_sync_increase
00003a  e7f3              B        |L2.36|
;;;85         }
;;;86         
;;;87     }
;;;88     
                          ENDP

                  |L2.60|
                          DCD      ||.bss.noinit||+0x260
                  |L2.64|
000040  68656c6c          DCB      "hello world! \r\n",0
000044  6f20776f
000048  726c6421
00004c  200d0a00

                          AREA ||i.vsf_thread_user_thread_t_entry||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_thread_user_thread_t_entry PROC
;;;46     
;;;47     implement_vsf_thread(user_thread_t) 
000000  4605              MOV      r5,r0
;;;48     {
;;;49         uint32_t cnt = 0;
000002  2400              MOVS     r4,#0
;;;50         while (1) {
;;;51             vsf_sem_pend(this.psem);        //! wait for semaphore forever
000004  1e66              SUBS     r6,r4,#1
                  |L3.6|
000006  4631              MOV      r1,r6
000008  6de8              LDR      r0,[r5,#0x5c]
00000a  f7fffffe          BL       __vsf_sem_pend
00000e  2804              CMP      r0,#4
000010  d0f9              BEQ      |L3.6|
;;;52             printf("receive semaphore from main...[%08x]\r\n", cnt++);
000012  4621              MOV      r1,r4
000014  1c64              ADDS     r4,r4,#1
000016  a002              ADR      r0,|L3.32|
000018  f7fffffe          BL       __2printf
00001c  e7f3              B        |L3.6|
;;;53         }
;;;54     }
;;;55     
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
000020  72656365          DCB      "receive semaphore from main...[%08x]\r\n",0
000024  69766520
000028  73656d61
00002c  70686f72
000030  65206672
000034  6f6d206d
000038  61696e2e
00003c  2e2e5b25
000040  3038785d
000044  0d0a00  
000047  00                DCB      0

                          AREA ||i.vsf_thread_user_thread_t_start||, CODE, READONLY, ALIGN=2

                  vsf_thread_user_thread_t_start PROC
;;;46     
;;;47     implement_vsf_thread(user_thread_t) 
000000  4602              MOV      r2,r0
000002  f5007000          ADD      r0,r0,#0x200
000006  4b04              LDR      r3,|L4.24|
000008  6383              STR      r3,[r0,#0x38]
00000a  6402              STR      r2,[r0,#0x40]
00000c  f44f7200          MOV      r2,#0x200
000010  8782              STRH     r2,[r0,#0x3c]
000012  f7ffbffe          B.W      vsf_thread_start
;;;48     {
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      vsf_thread_user_thread_t_entry

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_task
                          %        608
                  user_sem
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_thread_simple.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_9332c2a4____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___20_main_thread_simple_c_9332c2a4____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_9332c2a4____REVSH|
#line 483
|__asm___20_main_thread_simple_c_9332c2a4____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_9332c2a4____RRX|
#line 670
|__asm___20_main_thread_simple_c_9332c2a4____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
