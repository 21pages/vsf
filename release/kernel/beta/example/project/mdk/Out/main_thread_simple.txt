; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_thread_simple.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_thread_simple.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I..\..\usrapp\template\app_cfg -I.\RTE\Device\CMSDK_CM3 -I.\RTE\_tempalte_armv7-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM3\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM3 --enum_is_int --wchar32 --omf_browse=.\out\main_thread_simple.crf ..\..\usrapp\template\main_thread_simple.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;98     #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;99     int main(void)
000000  f7fffffe          BL       vsf_stdio_init
;;;100    {
;;;101        vsf_stdio_init();
;;;102        
;;;103        vsf_kernel_thread_simple_demo();
000004  f7fffffe          BL       vsf_kernel_thread_simple_demo
;;;104        
;;;105    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;106        while(1) {
;;;107            printf("hello world! \r\n");
;;;108            vsf_delay_ms(1000);
000008  f44f747a          MOV      r4,#0x3e8
                  |L1.12|
00000c  a004              ADR      r0,|L1.32|
00000e  f7fffffe          BL       __2printf
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       vsf_systimer_ms_to_tick
000018  f7fffffe          BL       __vsf_delay
00001c  e7f6              B        |L1.12|
;;;109        }
;;;110    #endif
;;;111    }
;;;112    
                          ENDP

00001e  0000              DCW      0x0000
                  |L1.32|
000020  68656c6c          DCB      "hello world! \r\n",0
000024  6f20776f
000028  726c6421
00002c  200d0a00

                          AREA ||i.vsf_kernel_thread_simple_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_thread_simple_demo PROC
;;;56     
;;;57     void vsf_kernel_thread_simple_demo(void)
000000  b510              PUSH     {r4,lr}
;;;58     {    
;;;59         //! initialise semaphore
;;;60         vsf_sem_init(&user_sem, 0); 
000002  f64772ff          MOV      r2,#0x7fff
000006  2100              MOVS     r1,#0
000008  4809              LDR      r0,|L2.48|
00000a  f7fffffe          BL       vsf_eda_sync_init
;;;61         
;;;62         //! start the user task a
;;;63         {
;;;64             static NO_INIT user_thread_a_t __user_task_a;
;;;65             __user_task_a.param.psem = &user_sem;
00000e  4c08              LDR      r4,|L2.48|
;;;66             init_vsf_thread(user_thread_a_t, &__user_task_a, vsf_priority_0);
000010  2100              MOVS     r1,#0
000012  f5a46096          SUB      r0,r4,#0x4b0          ;65
000016  f8c04250          STR      r4,[r0,#0x250]  ; __user_task_a
00001a  f7fffffe          BL       vsf_thread_user_thread_a_t_start
;;;67         }
;;;68         
;;;69         //! start the user task b
;;;70         {
;;;71             static NO_INIT user_thread_b_t __user_task_b;
;;;72             __user_task_b.param.psem = &user_sem;
00001e  f5a47016          SUB      r0,r4,#0x258
;;;73             init_vsf_thread(user_thread_b_t, &__user_task_b, vsf_priority_0);
000022  2100              MOVS     r1,#0
000024  f8c04250          STR      r4,[r0,#0x250]  ; __user_task_b
000028  e8bd4010          POP      {r4,lr}
00002c  f7ffbffe          B.W      vsf_thread_user_thread_b_t_start
;;;74         }
;;;75     }
;;;76     
                          ENDP

                  |L2.48|
                          DCD      ||.bss.noinit||+0x4b0

                          AREA ||i.vsf_thread_user_thread_a_t_entry||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_thread_user_thread_a_t_entry PROC
;;;76     
;;;77     implement_vsf_thread(user_thread_a_t) 
000000  4605              MOV      r5,r0
;;;78     {
;;;79         uint32_t cnt = 0;
000002  2400              MOVS     r4,#0
;;;80         while (1) {
;;;81             vsf_delay_ms(1000);
000004  f44f767a          MOV      r6,#0x3e8
                  |L3.8|
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       vsf_systimer_ms_to_tick
00000e  f7fffffe          BL       __vsf_delay
;;;82             printf("post semaphore to user thread b ...     [%08x]\r\n", cnt++);
000012  4621              MOV      r1,r4
000014  1c64              ADDS     r4,r4,#1
000016  a003              ADR      r0,|L3.36|
000018  f7fffffe          BL       __2printf
;;;83             vsf_sem_post(this.psem);            //!< post a semaphore
00001c  6d28              LDR      r0,[r5,#0x50]
00001e  f7fffffe          BL       vsf_eda_sync_increase
000022  e7f1              B        |L3.8|
;;;84         }
;;;85     }
;;;86     
                          ENDP

                  |L3.36|
000024  706f7374          DCB      "post semaphore to user thread b ...     [%08x]\r\n",0
000028  2073656d
00002c  6170686f
000030  72652074
000034  6f207573
000038  65722074
00003c  68726561
000040  64206220
000044  2e2e2e20
000048  20202020
00004c  5b253038
000050  785d0d0a
000054  00      
000055  00                DCB      0
000056  00                DCB      0
000057  00                DCB      0

                          AREA ||i.vsf_thread_user_thread_a_t_start||, CODE, READONLY, ALIGN=2

                  vsf_thread_user_thread_a_t_start PROC
;;;76     
;;;77     implement_vsf_thread(user_thread_a_t) 
000000  4602              MOV      r2,r0
000002  f5007000          ADD      r0,r0,#0x200
000006  4b04              LDR      r3,|L4.24|
000008  6383              STR      r3,[r0,#0x38]
00000a  6402              STR      r2,[r0,#0x40]
00000c  f44f7200          MOV      r2,#0x200
000010  8782              STRH     r2,[r0,#0x3c]
000012  f7ffbffe          B.W      vsf_thread_start
;;;78     {
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      vsf_thread_user_thread_a_t_entry

                          AREA ||i.vsf_thread_user_thread_b_t_entry||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_thread_user_thread_b_t_entry PROC
;;;86     
;;;87     implement_vsf_thread(user_thread_b_t) 
000000  4605              MOV      r5,r0
;;;88     {
;;;89         uint32_t cnt = 0;
000002  2400              MOVS     r4,#0
;;;90         while (1) {
;;;91             vsf_sem_pend(this.psem);            //! wait for semaphore forever
000004  1e66              SUBS     r6,r4,#1
                  |L5.6|
000006  4631              MOV      r1,r6
000008  6d28              LDR      r0,[r5,#0x50]
00000a  f7fffffe          BL       __vsf_sem_pend
00000e  2804              CMP      r0,#4
000010  d0f9              BEQ      |L5.6|
;;;92             printf("receive semaphore from user thread a ...[%08x]\r\n", cnt++);
000012  4621              MOV      r1,r4
000014  1c64              ADDS     r4,r4,#1
000016  a002              ADR      r0,|L5.32|
000018  f7fffffe          BL       __2printf
00001c  e7f3              B        |L5.6|
;;;93         }
;;;94     }
;;;95     
                          ENDP

00001e  0000              DCW      0x0000
                  |L5.32|
000020  72656365          DCB      "receive semaphore from user thread a ...[%08x]\r\n",0
000024  69766520
000028  73656d61
00002c  70686f72
000030  65206672
000034  6f6d2075
000038  73657220
00003c  74687265
000040  61642061
000044  202e2e2e
000048  5b253038
00004c  785d0d0a
000050  00      
000051  00                DCB      0
000052  00                DCB      0
000053  00                DCB      0

                          AREA ||i.vsf_thread_user_thread_b_t_start||, CODE, READONLY, ALIGN=2

                  vsf_thread_user_thread_b_t_start PROC
;;;86     
;;;87     implement_vsf_thread(user_thread_b_t) 
000000  4602              MOV      r2,r0
000002  f5007000          ADD      r0,r0,#0x200
000006  4b04              LDR      r3,|L6.24|
000008  6383              STR      r3,[r0,#0x38]
00000a  6402              STR      r2,[r0,#0x40]
00000c  f44f7200          MOV      r2,#0x200
000010  8782              STRH     r2,[r0,#0x3c]
000012  f7ffbffe          B.W      vsf_thread_start
;;;88     {
                          ENDP

000016  0000              DCW      0x0000
                  |L6.24|
                          DCD      vsf_thread_user_thread_b_t_entry

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_task_a
                          %        600
                  __user_task_b
                          %        600
                  user_sem
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_thread_simple.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_0d0c82b2____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___20_main_thread_simple_c_0d0c82b2____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_0d0c82b2____REVSH|
#line 483
|__asm___20_main_thread_simple_c_0d0c82b2____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_main_thread_simple_c_0d0c82b2____RRX|
#line 670
|__asm___20_main_thread_simple_c_0d0c82b2____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
