; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_pt_simple.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_pt_simple.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I.\RTE\Device\CMSDK_CM0 -I.\RTE\_template_armv6-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM0\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM0 --enum_is_int --wchar32 --omf_browse=.\out\main_pt_simple.crf ..\..\usrapp\template\main_pt_simple.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;154    #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;155    int main(void)
000000  f7fffffe          BL       vsf_stdio_init
;;;156    {
;;;157        vsf_stdio_init();
;;;158        
;;;159        vsf_kernel_pt_simple_demo();
000004  f7fffffe          BL       vsf_kernel_pt_simple_demo
;;;160        
;;;161        while(1);
;;;162    }
;;;163    
                          ENDP


                          AREA ||i.vsf_kernel_pt_simple_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_pt_simple_demo PROC
;;;108    
;;;109    void vsf_kernel_pt_simple_demo(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;110    {
;;;111        static_task_instance(
;;;112            features_used(
;;;113                mem_sharable( )
;;;114                mem_nonsharable( )
;;;115            )
;;;116        )
;;;117        
;;;118        //! initialise semaphore
;;;119        vsf_sem_init(&user_sem, 0); 
000002  4a11              LDR      r2,|L2.72|
000004  2100              MOVS     r1,#0
000006  4811              LDR      r0,|L2.76|
000008  f7fffffe          BL       vsf_eda_sync_init
;;;120        
;;;121        //! start a user task
;;;122        do {
;;;123            static NO_INIT user_pt_task_t __user_task;
;;;124    #if __IS_COMPILER_ARM_COMPILER_5__
;;;125            __user_task.use_as__task_cb_user_pt_task_t.psem = &user_sem;
00000c  480f              LDR      r0,|L2.76|
;;;126    #else
;;;127            __user_task.psem = &user_sem;
;;;128    #endif
;;;129            
;;;130            init_vsf_pt(user_pt_task_t, &__user_task, vsf_priority_inherit);
00000e  466c              MOV      r4,sp
000010  4601              MOV      r1,r0                 ;125
000012  3960              SUBS     r1,r1,#0x60           ;125
000014  64c8              STR      r0,[r1,#0x4c]  ; __user_task
000016  490e              LDR      r1,|L2.80|
000018  c90f              LDM      r1,{r0-r3}
00001a  c40f              STM      r4!,{r0-r3}
00001c  480b              LDR      r0,|L2.76|
00001e  2100              MOVS     r1,#0
000020  3820              SUBS     r0,r0,#0x20
000022  7201              STRB     r1,[r0,#8]
000024  4669              MOV      r1,sp
000026  3840              SUBS     r0,r0,#0x40
000028  f7fffffe          BL       vsf_task_start
;;;131        } while(0);
;;;132    
;;;133    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;134        while(1) {
;;;135            printf("hello world! \r\n");
;;;136            vsf_delay_ms(10000);
00002c  4c09              LDR      r4,|L2.84|
                  |L2.46|
00002e  a00a              ADR      r0,|L2.88|
000030  f7fffffe          BL       __2printf
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       vsf_systimer_ms_to_tick
00003a  f7fffffe          BL       __vsf_delay
;;;137            vsf_sem_post(&user_sem);            //!< post a semaphore
00003e  4803              LDR      r0,|L2.76|
000040  f7fffffe          BL       vsf_eda_sync_increase
000044  e7f3              B        |L2.46|
;;;138        }
;;;139    #else
;;;140        //! in this case, we only use main to initialise vsf_tasks
;;;141    
;;;142        //! start a user task b
;;;143        do {
;;;144            static NO_INIT user_pt_task_b_t __user_task_b;
;;;145            __user_task_b.psem = &user_sem;
;;;146            __user_task_b.chState = 0;
;;;147            init_vsf_pt(user_pt_task_b_t, &__user_task_b, vsf_priority_inherit);
;;;148        } while(0);
;;;149        
;;;150        return 0;
;;;151    #endif
;;;152    }
;;;153    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      0x00007fff
                  |L2.76|
                          DCD      ||.bss.noinit||+0x60
                  |L2.80|
                          DCD      ||.constdata||
                  |L2.84|
                          DCD      0x00002710
                  |L2.88|
000058  68656c6c          DCB      "hello world! \r\n",0
00005c  6f20776f
000060  726c6421
000064  200d0a00

                          AREA ||i.vsf_task_func_user_pt_sub_task_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_task_func_user_pt_sub_task_t PROC
;;;54     
;;;55     private implement_vsf_pt(user_pt_sub_task_t) 
000000  b510              PUSH     {r4,lr}
;;;56     {
;;;57         vsf_pt_begin();
000002  7801              LDRB     r1,[r0,#0]
000004  2900              CMP      r1,#0
000006  d105              BNE      |L3.20|
;;;58        
;;;59         printf("receive semaphore from main...[%08x]\r\n", this.cnt++);
000008  6841              LDR      r1,[r0,#4]
00000a  1c4a              ADDS     r2,r1,#1
00000c  6042              STR      r2,[r0,#4]
00000e  a002              ADR      r0,|L3.24|
000010  f7fffffe          BL       __2printf
                  |L3.20|
;;;60          
;;;61         vsf_pt_end();
000014  2000              MOVS     r0,#0
;;;62     }
000016  bd10              POP      {r4,pc}
;;;63     
                          ENDP

                  |L3.24|
000018  72656365          DCB      "receive semaphore from main...[%08x]\r\n",0
00001c  69766520
000020  73656d61
000024  70686f72
000028  65206672
00002c  6f6d206d
000030  61696e2e
000034  2e2e5b25
000038  3038785d
00003c  0d0a00  
00003f  00                DCB      0

                          AREA ||i.vsf_task_func_user_pt_task_t||, CODE, READONLY, ALIGN=2

                  vsf_task_func_user_pt_task_t PROC
;;;66     
;;;67     private implement_vsf_pt(user_pt_task_t) 
000000  b570              PUSH     {r4-r6,lr}
;;;68     {
000002  4604              MOV      r4,r0
;;;69         vsf_pt_begin();
000004  7800              LDRB     r0,[r0,#0]
000006  2500              MOVS     r5,#0
000008  2800              CMP      r0,#0
00000a  d005              BEQ      |L4.24|
00000c  2801              CMP      r0,#1
00000e  d006              BEQ      |L4.30|
000010  2802              CMP      r0,#2
000012  d012              BEQ      |L4.58|
;;;70     
;;;71         this.cnt = 0;
;;;72         while(1) {
;;;73             vsf_pt_wait_until(
;;;74                     vsf_sem_pend(this.psem);                                        //!< wait for semaphore forever
;;;75                 );
;;;76                 
;;;77             this.print_task.cnt = this.cnt;                                         //!< Pass parameter
;;;78             vsf_pt_call(user_pt_sub_task_t, &this.print_task) {
;;;79                     //! pt call complete
;;;80                     this.cnt = this.print_task.cnt;                                 //!< read parameter
;;;81                 }
;;;82                 vsf_pt_on_call_return(fsm_rt_err) {
;;;83                     printf("error detected\r\n");
;;;84                 }
;;;85         }
;;;86     
;;;87         vsf_pt_end();
000014  2000              MOVS     r0,#0
;;;88     }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  60a5              STR      r5,[r4,#8]            ;71
                  |L4.26|
00001a  2001              MOVS     r0,#1                 ;73
00001c  7020              STRB     r0,[r4,#0]            ;73
                  |L4.30|
00001e  2100              MOVS     r1,#0                 ;73
000020  43c9              MVNS     r1,r1                 ;73
000022  6860              LDR      r0,[r4,#4]            ;73
000024  f7fffffe          BL       __vsf_sem_pend
000028  2803              CMP      r0,#3                 ;73
00002a  d001              BEQ      |L4.48|
00002c  2002              MOVS     r0,#2                 ;73
                  |L4.46|
00002e  bd70              POP      {r4-r6,pc}
                  |L4.48|
000030  68a0              LDR      r0,[r4,#8]            ;77
000032  6120              STR      r0,[r4,#0x10]         ;78
000034  7325              STRB     r5,[r4,#0xc]          ;78
000036  2002              MOVS     r0,#2                 ;78
000038  7020              STRB     r0,[r4,#0]            ;78
                  |L4.58|
00003a  4621              MOV      r1,r4                 ;78
00003c  2201              MOVS     r2,#1                 ;78
00003e  310c              ADDS     r1,r1,#0xc            ;78
000040  4807              LDR      r0,|L4.96|
000042  f7fffffe          BL       vsf_task_branch
000046  2801              CMP      r0,#1                 ;78
000048  d0f1              BEQ      |L4.46|
00004a  2800              CMP      r0,#0                 ;78
00004c  d005              BEQ      |L4.90|
00004e  1c40              ADDS     r0,r0,#1              ;78
000050  d1e3              BNE      |L4.26|
000052  a004              ADR      r0,|L4.100|
000054  f7fffffe          BL       __2printf
000058  e7df              B        |L4.26|
                  |L4.90|
00005a  6920              LDR      r0,[r4,#0x10]         ;80
00005c  60a0              STR      r0,[r4,#8]            ;80
00005e  e7dc              B        |L4.26|
;;;89     
                          ENDP

                  |L4.96|
                          DCD      vsf_task_func_user_pt_sub_task_t
                  |L4.100|
000064  6572726f          DCB      "error detected\r\n",0
000068  72206465
00006c  74656374
000070  65640d0a
000074  00      
000075  00                DCB      0
000076  00                DCB      0
000077  00                DCB      0

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_task
                          %        96
                  user_sem
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      vsf_task_func_user_pt_task_t
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_pt_simple.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_main_pt_simple_c_bfbe44b1____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REVSH|
#line 483
|__asm___16_main_pt_simple_c_bfbe44b1____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
