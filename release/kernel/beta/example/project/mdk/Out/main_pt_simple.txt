; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_pt_simple.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_pt_simple.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177,111 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I..\..\usrapp\template\app_cfg -I.\RTE\Device\CMSDK_CM0 -I.\RTE\_template_armv6-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM0\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM0 --enum_is_int --wchar32 --omf_browse=.\out\main_pt_simple.crf ..\..\usrapp\template\main_pt_simple.c]
                          THUMB

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;133    #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;134    int main(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
;;;136        static_task_instance(
;;;137            features_used(
;;;138                mem_sharable( )
;;;139                mem_nonsharable( )
;;;140            )
;;;141        )
;;;142    
;;;143        vsf_stdio_init();
000002  f7fffffe          BL       vsf_stdio_init
;;;144        
;;;145        vsf_kernel_pt_simple_demo();
000006  f7fffffe          BL       vsf_kernel_pt_simple_demo
;;;146        
;;;147    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;148        while(1) {
;;;149            printf("hello world! \r\n");
;;;150            vsf_delay_ms(1000);
;;;151        }
;;;152    #else
;;;153        return 0;
00000a  2000              MOVS     r0,#0
;;;154    #endif
;;;155    }
00000c  bd10              POP      {r4,pc}
;;;156    
                          ENDP


                          AREA ||i.vsf_kernel_pt_simple_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_pt_simple_demo PROC
;;;100    
;;;101    void vsf_kernel_pt_simple_demo(void)
000000  b57f              PUSH     {r0-r6,lr}
;;;102    {  
;;;103        //! initialise semaphore
;;;104        vsf_sem_init(&user_sem, 0); 
000002  4a11              LDR      r2,|L2.72|
000004  2100              MOVS     r1,#0
000006  4811              LDR      r0,|L2.76|
000008  f7fffffe          BL       vsf_eda_sync_init
;;;105        
;;;106        //! start a user task
;;;107        {
;;;108            static NO_INIT user_pt_task_t __user_pt;
;;;109            __user_pt.param.psem = &user_sem;
00000c  4d0f              LDR      r5,|L2.76|
;;;110            init_vsf_pt(user_pt_task_t, &__user_pt, vsf_priority_inherit);
00000e  4c10              LDR      r4,|L2.80|
000010  4628              MOV      r0,r5                 ;109
000012  3898              SUBS     r0,r0,#0x98           ;109
000014  6405              STR      r5,[r0,#0x40]  ; __user_pt
000016  cc0f              LDM      r4!,{r0-r3}
000018  466e              MOV      r6,sp
00001a  c60f              STM      r6!,{r0-r3}
00001c  4628              MOV      r0,r5
00001e  4669              MOV      r1,sp
000020  3898              SUBS     r0,r0,#0x98
000022  3c10              SUBS     r4,r4,#0x10
000024  f7fffffe          BL       vsf_teda_init_ex
;;;111        };
;;;112    
;;;113    #if VSF_OS_RUN_MAIN_AS_THREAD == ENABLED
;;;114        uint32_t cnt = 0;
;;;115        while(1) {
;;;116            vsf_delay_ms(10000);
;;;117            printf("post semaphore...   [%08x]\r\n", cnt++);
;;;118            vsf_sem_post(&user_sem);            //!< post a semaphore
;;;119        }
;;;120    #else
;;;121        //! in this case, we only use main to initialise vsf_tasks
;;;122    
;;;123        //! start a user task b
;;;124        {
;;;125            static NO_INIT user_pt_task_b_t __user_pt_task_b;
;;;126            __user_pt_task_b.param.psem = &user_sem;
000028  4628              MOV      r0,r5
00002a  3848              SUBS     r0,r0,#0x48
;;;127            __user_pt_task_b.param.cnt = 0;
00002c  2100              MOVS     r1,#0
00002e  6445              STR      r5,[r0,#0x44]  ; __user_pt_task_b
000030  3410              ADDS     r4,r4,#0x10
000032  6401              STR      r1,[r0,#0x40]  ; __user_pt_task_b
000034  cc0f              LDM      r4!,{r0-r3}
000036  466c              MOV      r4,sp
000038  c40f              STM      r4!,{r0-r3}
;;;128            init_vsf_pt(user_pt_task_b_t, &__user_pt_task_b, vsf_priority_0);
00003a  4628              MOV      r0,r5
00003c  4669              MOV      r1,sp
00003e  3848              SUBS     r0,r0,#0x48
000040  f7fffffe          BL       vsf_teda_init_ex
;;;129        }
;;;130    #endif
;;;131    }
000044  bd7f              POP      {r0-r6,pc}
;;;132    
                          ENDP

000046  0000              DCW      0x0000
                  |L2.72|
                          DCD      0x00007fff
                  |L2.76|
                          DCD      ||.bss.noinit||+0x98
                  |L2.80|
                          DCD      ||.constdata||

                          AREA ||i.vsf_pt_func_user_pt_sub_task_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_pt_func_user_pt_sub_task_t PROC
;;;56     
;;;57     private implement_vsf_pt(user_pt_sub_task_t) 
000000  b510              PUSH     {r4,lr}
;;;58     {
;;;59         vsf_pt_begin();
000002  68c2              LDR      r2,[r0,#0xc]
000004  7a00              LDRB     r0,[r0,#8]
000006  2800              CMP      r0,#0
000008  d105              BNE      |L3.22|
;;;60        
;;;61         printf("receive semaphore...[%08x]\r\n", this.cnt++);
00000a  6811              LDR      r1,[r2,#0]
00000c  1c48              ADDS     r0,r1,#1
00000e  6010              STR      r0,[r2,#0]
000010  a002              ADR      r0,|L3.28|
000012  f7fffffe          BL       __2printf
                  |L3.22|
;;;62          
;;;63         vsf_pt_end();
000016  f7fffffe          BL       vsf_eda_return
;;;64     }
00001a  bd10              POP      {r4,pc}
;;;65     
                          ENDP

                  |L3.28|
00001c  72656365          DCB      "receive semaphore...[%08x]\r\n",0
000020  69766520
000024  73656d61
000028  70686f72
00002c  652e2e2e
000030  5b253038
000034  785d0d0a
000038  00      
000039  00                DCB      0
00003a  00                DCB      0
00003b  00                DCB      0

                          AREA ||i.vsf_pt_func_user_pt_task_b_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_x
                          REQUIRE _printf_longlong_hex
                  vsf_pt_func_user_pt_task_b_t PROC
;;;86     #if VSF_OS_RUN_MAIN_AS_THREAD != ENABLED
;;;87     private implement_vsf_pt(user_pt_task_b_t) 
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;88     {
;;;89         vsf_pt_begin();
000004  68c5              LDR      r5,[r0,#0xc]
000006  7a00              LDRB     r0,[r0,#8]
000008  3408              ADDS     r4,r4,#8              ;87
00000a  2800              CMP      r0,#0
00000c  d004              BEQ      |L4.24|
00000e  2801              CMP      r0,#1
000010  d004              BEQ      |L4.28|
;;;90         
;;;91         while(1) {
;;;92             vsf_pt_wait_until( vsf_delay_ms(10000));                                //!< wait 10s
;;;93             printf("post semaphore...   [%08x]\r\n", this.cnt++);
;;;94             vsf_sem_post(this.psem);                                                //!< post a semaphore
;;;95         }
;;;96         
;;;97         vsf_pt_end();
000012  f7fffffe          BL       vsf_eda_return
                  |L4.22|
;;;98     }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  2001              MOVS     r0,#1                 ;92
00001a  7020              STRB     r0,[r4,#0]            ;92
                  |L4.28|
00001c  4808              LDR      r0,|L4.64|
00001e  f7fffffe          BL       vsf_systimer_ms_to_tick
000022  f7fffffe          BL       __vsf_delay
000026  1fc1              SUBS     r1,r0,#7              ;92
000028  39fe              SUBS     r1,r1,#0xfe           ;92
00002a  d1f4              BNE      |L4.22|
00002c  6829              LDR      r1,[r5,#0]            ;93
00002e  1c48              ADDS     r0,r1,#1              ;93
000030  6028              STR      r0,[r5,#0]            ;93
000032  a004              ADR      r0,|L4.68|
000034  f7fffffe          BL       __2printf
000038  6868              LDR      r0,[r5,#4]            ;94
00003a  f7fffffe          BL       vsf_eda_sync_increase
00003e  e7eb              B        |L4.24|
;;;99     #endif
                          ENDP

                  |L4.64|
                          DCD      0x00002710
                  |L4.68|
000044  706f7374          DCB      "post semaphore...   [%08x]\r\n",0
000048  2073656d
00004c  6170686f
000050  72652e2e
000054  2e202020
000058  5b253038
00005c  785d0d0a
000060  00      
000061  00                DCB      0
000062  00                DCB      0
000063  00                DCB      0

                          AREA ||i.vsf_pt_func_user_pt_task_t||, CODE, READONLY, ALIGN=2

                  vsf_pt_func_user_pt_task_t PROC
;;;68     
;;;69     private implement_vsf_pt(user_pt_task_t) 
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;70     {
;;;71         vsf_pt_begin();
000004  68c4              LDR      r4,[r0,#0xc]
000006  7a00              LDRB     r0,[r0,#8]
000008  3508              ADDS     r5,r5,#8              ;69
00000a  2800              CMP      r0,#0
00000c  d01e              BEQ      |L5.76|
00000e  2801              CMP      r0,#1
000010  d006              BEQ      |L5.32|
000012  2802              CMP      r0,#2
000014  d00f              BEQ      |L5.54|
000016  2803              CMP      r0,#3
000018  d017              BEQ      |L5.74|
;;;72     
;;;73         this.cnt = 0;
;;;74         while(1) {
;;;75             vsf_pt_wait_until(vsf_sem_pend(this.psem));                             //!< wait for semaphore forever
;;;76                 
;;;77             this.print_task.cnt = this.cnt;                                         //!< Pass parameter
;;;78             vsf_call_pt(user_pt_sub_task_t, &this.print_task);
;;;79             //! pt call complete
;;;80             this.cnt = this.print_task.cnt;                                         //!< read parameter
;;;81         }
;;;82     
;;;83         vsf_pt_end();
00001a  f7fffffe          BL       vsf_eda_return
                  |L5.30|
;;;84     }
00001e  bd70              POP      {r4-r6,pc}
                  |L5.32|
000020  2100              MOVS     r1,#0                 ;75
000022  43c9              MVNS     r1,r1                 ;75
000024  6820              LDR      r0,[r4,#0]            ;75
000026  f7fffffe          BL       __vsf_sem_pend
00002a  2803              CMP      r0,#3                 ;75
00002c  d1f7              BNE      |L5.30|
00002e  6860              LDR      r0,[r4,#4]            ;77
000030  60a0              STR      r0,[r4,#8]            ;78
000032  2002              MOVS     r0,#2                 ;78
000034  7028              STRB     r0,[r5,#0]            ;78
                  |L5.54|
000036  4621              MOV      r1,r4                 ;78
000038  3108              ADDS     r1,r1,#8              ;78
00003a  4806              LDR      r0,|L5.84|
00003c  f7fffffe          BL       vsf_eda_call_eda
000040  2800              CMP      r0,#0                 ;78
000042  d1ec              BNE      |L5.30|
000044  2003              MOVS     r0,#3                 ;78
000046  7028              STRB     r0,[r5,#0]            ;78
000048  bd70              POP      {r4-r6,pc}
                  |L5.74|
00004a  68a0              LDR      r0,[r4,#8]            ;80
                  |L5.76|
00004c  6060              STR      r0,[r4,#4]            ;75
00004e  2001              MOVS     r0,#1                 ;75
000050  7028              STRB     r0,[r5,#0]            ;75
000052  e7e5              B        |L5.32|
;;;85     
                          ENDP

                  |L5.84|
                          DCD      vsf_pt_func_user_pt_sub_task_t

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_pt
                          %        80
                  __user_pt_task_b
                          %        72
                  user_sem
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                          DCD      vsf_pt_func_user_pt_task_t
                          DCD      0xffffffff
                          DCD      __user_pt+0x40
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      vsf_pt_func_user_pt_task_b_t
                          DCD      0x00000000
                          DCD      __user_pt_task_b+0x40
00001c  00000000          DCB      0x00,0x00,0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_pt_simple.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___16_main_pt_simple_c_bfbe44b1____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_main_pt_simple_c_bfbe44b1____REVSH|
#line 483
|__asm___16_main_pt_simple_c_bfbe44b1____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
