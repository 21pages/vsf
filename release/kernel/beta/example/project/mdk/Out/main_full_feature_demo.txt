; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave --gnu -o.\out\main_full_feature_demo.o --asm_dir=.\Out\ --list_dir=.\Out\ --depend=.\out\main_full_feature_demo.d --cpu=Cortex-M0 --apcs=interwork -O3 --diag_suppress=9931,64,1,381,177,111 -I..\..\..\vsf -I..\..\usrapp\template -I..\..\..\vsf\utilities\compiler\arm\CMSIS\Core\Include -I..\..\usrapp\template\app_cfg -I.\RTE\Device\CMSDK_CM0 -I.\RTE\_template_armv6-m_ac5 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.5.1\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Boards\ARM\V2M-MPS2\Common -IC:\Keil_v5\ARM\PACK\Keil\V2M-MPS2_CMx_BSP\1.7.0\Device\CMSDK_CM0\Include -D__MICROLIB -D__UVISION_VERSION=527 -D_RTE_ -DCMSDK_CM0 --enum_is_int --wchar32 --omf_browse=.\out\main_full_feature_demo.crf ..\..\usrapp\template\main_full_feature_demo.c]
                          THUMB

                          AREA ||i.__code_region_example_on_enter||, CODE, READONLY, ALIGN=2

                  __code_region_example_on_enter PROC
;;;165    
;;;166    static void __code_region_example_on_enter(void *pObj, void *pLocal)
000000  b510              PUSH     {r4,lr}
;;;167    {
;;;168        printf("-------enter-------\r\n");
000002  a002              ADR      r0,|L1.12|
000004  f7fffffe          BL       __2printf
;;;169    }
000008  bd10              POP      {r4,pc}
;;;170    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
00000c  2d2d2d2d          DCB      "-------enter-------\r\n",0
000010  2d2d2d65
000014  6e746572
000018  2d2d2d2d
00001c  2d2d2d0d
000020  0a00    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.__code_region_example_on_leave||, CODE, READONLY, ALIGN=2

                  __code_region_example_on_leave PROC
;;;170    
;;;171    static void __code_region_example_on_leave(void *pObj,void *pLocal)
000000  b510              PUSH     {r4,lr}
;;;172    {
;;;173        printf("-------leave-------\r\n");
000002  a002              ADR      r0,|L2.12|
000004  f7fffffe          BL       __2printf
;;;174    }
000008  bd10              POP      {r4,pc}
;;;175    
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
00000c  2d2d2d2d          DCB      "-------leave-------\r\n",0
000010  2d2d2d6c
000014  65617665
000018  2d2d2d2d
00001c  2d2d2d0d
000020  0a00    
000022  00                DCB      0
000023  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=1

                  main PROC
;;;368    #if VSF_PROJ_CFG_USE_CUBE != ENABLED
;;;369    int main(void)
000000  f7fffffe          BL       vsf_stdio_init
;;;370    {
;;;371        vsf_stdio_init();
;;;372        
;;;373        vsf_kernel_full_feature_demo();
000004  f7fffffe          BL       vsf_kernel_full_feature_demo
;;;374        
;;;375        while(1);
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.vsf_kernel_full_feature_demo||, CODE, READONLY, ALIGN=2

                  vsf_kernel_full_feature_demo PROC
;;;292    
;;;293    void vsf_kernel_full_feature_demo(void)
000000  b51f              PUSH     {r0-r4,lr}
;;;294    {
;;;295        static_task_instance(
;;;296            features_used(
;;;297                mem_sharable( using_grouped_evt; )
;;;298                mem_nonsharable(
;;;299                )
;;;300            )
;;;301        )
;;;302        
;;;303    #if VSF_CFG_SYNC_EN == ENABLED
;;;304        // initialize adapter
;;;305        do {
;;;306            vsf_sem_init(&user_sem, 0);
000002  4a33              LDR      r2,|L4.208|
000004  2100              MOVS     r1,#0
000006  4833              LDR      r0,|L4.212|
000008  f7fffffe          BL       vsf_eda_sync_init
;;;307    
;;;308    #   if VSF_CFG_BMPEVT_EN == ENABLED
;;;309            init_grouped_evts(user_grouped_evts_t, &__user_grouped_evts, timer4_evt_msk);
00000c  4831              LDR      r0,|L4.212|
00000e  2310              MOVS     r3,#0x10
000010  2201              MOVS     r2,#1
000012  4931              LDR      r1,|L4.216|
000014  3068              ADDS     r0,r0,#0x68
000016  f7fffffe          BL       grouped_evts_init
;;;310    
;;;311            init_vsf_task(bmevt_demo_t, &__bmevt_demo, vsf_priority_0);
00001a  4e30              LDR      r6,|L4.220|
00001c  466c              MOV      r4,sp
00001e  ce0f              LDM      r6!,{r0-r3}
000020  c40f              STM      r4!,{r0-r3}
000022  482c              LDR      r0,|L4.212|
000024  2500              MOVS     r5,#0
000026  3050              ADDS     r0,r0,#0x50
000028  7205              STRB     r5,[r0,#8]
00002a  4669              MOV      r1,sp
00002c  3840              SUBS     r0,r0,#0x40
00002e  3e10              SUBS     r6,r6,#0x10
000030  f7fffffe          BL       vsf_task_start
000034  3610              ADDS     r6,r6,#0x10
000036  ce0f              LDM      r6!,{r0-r3}
000038  466c              MOV      r4,sp
00003a  c40f              STM      r4!,{r0-r3}
;;;312    #       if VSF_USE_KERNEL_PT_MODE == ENABLED
;;;313            do {
;;;314                static user_pt_bmpevt_demo_thread_t __pt_demo = {
;;;315                    .param = {
;;;316                        .mask = timer4_evt_msk,
;;;317                        .pgroup_evts = &__user_grouped_evts,
;;;318                    },
;;;319                };
;;;320                init_vsf_pt(user_pt_bmpevt_demo_thread_t, &__pt_demo, vsf_priority_inherit);
00003c  4826              LDR      r0,|L4.216|
00003e  4669              MOV      r1,sp
000040  3048              ADDS     r0,r0,#0x48
000042  7205              STRB     r5,[r0,#8]
000044  3840              SUBS     r0,r0,#0x40
000046  3e20              SUBS     r6,r6,#0x20
000048  f7fffffe          BL       vsf_task_start
;;;321            } while(0);
;;;322    #       endif
;;;323    #   endif
;;;324        } while(0);
;;;325    #endif
;;;326        
;;;327    #if VSF_CFG_TIMER_EN == ENABLED
;;;328        for (int i = 0; i < dimof(__timer_example); i++) {
;;;329            init_vsf_task(  timer_example_t,            //!< vst_task type
00004c  4f24              LDR      r7,|L4.224|
00004e  2400              MOVS     r4,#0                 ;328
                  |L4.80|
000050  6af2              LDR      r2,[r6,#0x2c]  ; <Data5>
000052  6a71              LDR      r1,[r6,#0x24]  ; <Data5>
000054  6a30              LDR      r0,[r6,#0x20]  ; <Data5>
000056  9000              STR      r0,[sp,#0]
000058  2050              MOVS     r0,#0x50
00005a  4360              MULS     r0,r4,r0
00005c  9101              STR      r1,[sp,#4]
00005e  19c0              ADDS     r0,r0,r7
000060  9203              STR      r2,[sp,#0xc]
000062  2148              MOVS     r1,#0x48
000064  9002              STR      r0,[sp,#8]
000066  540d              STRB     r5,[r1,r0]
000068  4669              MOV      r1,sp
00006a  f7fffffe          BL       vsf_task_start
00006e  1c64              ADDS     r4,r4,#1
000070  2c05              CMP      r4,#5                 ;328
000072  d3ed              BCC      |L4.80|
;;;330                            &__timer_example[i],        //!< vsf_task object
;;;331                            vsf_priority_0,             //!< priority
;;;332                            &__timer_example[i]);       //!< target object (pthis)
;;;333        }
;;;334    #endif
;;;335    
;;;336    
;;;337    #if VSF_USE_KERNEL_THREAD_MODE == ENABLED
;;;338        do {
;;;339            static NO_INIT user_task_t __user_task;
;;;340    #   if VSF_CFG_SYNC_EN == ENABLED
;;;341            __user_task.param.psem = &user_sem;
000074  491a              LDR      r1,|L4.224|
000076  4817              LDR      r0,|L4.212|
000078  3960              SUBS     r1,r1,#0x60
;;;342    #   endif
;;;343            init_vsf_thread(user_task_t, &__user_task, vsf_priority_0);
00007a  65c8              STR      r0,[r1,#0x5c]  ; __user_task
00007c  2100              MOVS     r1,#0
00007e  4819              LDR      r0,|L4.228|
000080  f7fffffe          BL       vsf_thread_user_task_t_start
000084  2601              MOVS     r6,#1                 ;309
;;;344        } while(0);
;;;345    #endif
;;;346    
;;;347    
;;;348    #if VSF_CFG_BMPEVT_EN == ENABLED && VSF_USE_KERNEL_THREAD_MODE == ENABLED
;;;349        while (1) {
;;;350            wait_for_all(   &__user_grouped_evts, 
000086  272f              MOVS     r7,#0x2f
000088  4c13              LDR      r4,|L4.216|
00008a  1eb5              SUBS     r5,r6,#2
                  |L4.140|
00008c  6860              LDR      r0,[r4,#4]  ; ptThis
00008e  6007              STR      r7,[r0,#0]
000090  7106              STRB     r6,[r0,#4]
                  |L4.146|
000092  4810              LDR      r0,|L4.212|
000094  462a              MOV      r2,r5
000096  3068              ADDS     r0,r0,#0x68
000098  6861              LDR      r1,[r4,#4]  ; ptThis
00009a  f7fffffe          BL       vsf_bmpevt_wait_for
00009e  2803              CMP      r0,#3
0000a0  d00a              BEQ      |L4.184|
;;;351                            all_evts_msk_of_user_grouped_evts_t &~timer4_evt_msk) {
;;;352                //! when all the grouped events are set
;;;353                reset_grouped_evts( &__user_grouped_evts, 
;;;354                                    all_evts_msk_of_user_grouped_evts_t &~timer4_evt_msk);
;;;355                printf("\r\n--------------barrier--------------: \r\n");
;;;356            } on_bmevt_timeout() {
0000a2  2801              CMP      r0,#1
0000a4  d00f              BEQ      |L4.198|
0000a6  2804              CMP      r0,#4                 ;350
0000a8  d0f3              BEQ      |L4.146|
                  |L4.170|
;;;357                //! when timeout happened
;;;358                printf("\r\n============== barrier timeout ============: \r\n");
;;;359            }
;;;360    
;;;361            vsf_delay_ms(1000);
0000aa  207d              MOVS     r0,#0x7d
0000ac  00c0              LSLS     r0,r0,#3
0000ae  f7fffffe          BL       vsf_systimer_ms_to_tick
0000b2  f7fffffe          BL       __vsf_delay
0000b6  e7e9              B        |L4.140|
                  |L4.184|
0000b8  4806              LDR      r0,|L4.212|
0000ba  212f              MOVS     r1,#0x2f              ;353
0000bc  3068              ADDS     r0,r0,#0x68           ;353
0000be  f7fffffe          BL       vsf_eda_bmpevt_reset
0000c2  a009              ADR      r0,|L4.232|
0000c4  e000              B        |L4.200|
                  |L4.198|
0000c6  a013              ADR      r0,|L4.276|
                  |L4.200|
0000c8  f7fffffe          BL       __2printf
0000cc  e7ed              B        |L4.170|
;;;362        }
;;;363    #endif
;;;364    
;;;365    }
;;;366    
                          ENDP

0000ce  0000              DCW      0x0000
                  |L4.208|
                          DCD      0x00007fff
                  |L4.212|
                          DCD      ||.bss.noinit||+0x5f0
                  |L4.216|
                          DCD      ||area_number.18||
                  |L4.220|
                          DCD      ||area_number.16||
                  |L4.224|
                          DCD      ||.bss.noinit||+0x460
                  |L4.228|
                          DCD      ||.bss.noinit||
                  |L4.232|
0000e8  0d0a2d2d          DCB      "\r\n--------------barrier--------------: \r\n",0
0000ec  2d2d2d2d
0000f0  2d2d2d2d
0000f4  2d2d2d2d
0000f8  62617272
0000fc  6965722d
000100  2d2d2d2d
000104  2d2d2d2d
000108  2d2d2d2d
00010c  2d3a200d
000110  0a00    
000112  00                DCB      0
000113  00                DCB      0
                  |L4.276|
000114  0d0a3d3d          DCB      "\r\n============== barrier timeout ============: \r\n",0
000118  3d3d3d3d
00011c  3d3d3d3d
000120  3d3d3d3d
000124  20626172
000128  72696572
00012c  2074696d
000130  656f7574
000134  203d3d3d
000138  3d3d3d3d
00013c  3d3d3d3d
000140  3d3a200d
000144  0a00    
000146  00                DCB      0
000147  00                DCB      0

                          AREA ||i.vsf_task_func_bmevt_demo_t||, CODE, READONLY, ALIGN=2

                  vsf_task_func_bmevt_demo_t PROC
;;;276    
;;;277    implement_vsf_task(bmevt_demo_t)
000000  b510              PUSH     {r4,lr}
;;;278    {
;;;279        vsf_task_wait_until(
000002  2110              MOVS     r1,#0x10
000004  6041              STR      r1,[r0,#4]
000006  2100              MOVS     r1,#0
000008  7201              STRB     r1,[r0,#8]
00000a  1e4a              SUBS     r2,r1,#1
00000c  1d01              ADDS     r1,r0,#4
00000e  4806              LDR      r0,|L5.40|
000010  f7fffffe          BL       vsf_bmpevt_wait_for
000014  2803              CMP      r0,#3
000016  d001              BEQ      |L5.28|
000018  2002              MOVS     r0,#2
;;;280            wait_for_one(&__user_grouped_evts, timer4_evt_msk){
;;;281                printf("get timer 4 in eda task\r\n");
;;;282                return fsm_rt_yield;         //! do this again
;;;283            }
;;;284        );
;;;285        
;;;286        return fsm_rt_wait_for_evt;
;;;287    }
00001a  bd10              POP      {r4,pc}
                  |L5.28|
00001c  a003              ADR      r0,|L5.44|
00001e  f7fffffe          BL       __2printf
000022  2001              MOVS     r0,#1                 ;279
000024  bd10              POP      {r4,pc}
;;;288    
                          ENDP

000026  0000              DCW      0x0000
                  |L5.40|
                          DCD      ||.bss.noinit||+0x658
                  |L5.44|
00002c  67657420          DCB      "get timer 4 in eda task\r\n",0
000030  74696d65
000034  72203420
000038  696e2065
00003c  64612074
000040  61736b0d
000044  0a00    
000046  00                DCB      0
000047  00                DCB      0

                          AREA ||i.vsf_task_func_timer_example_t||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_percent
                          REQUIRE _printf_d
                          REQUIRE _printf_int_dec
                  vsf_task_func_timer_example_t PROC
;;;141    
;;;142    static implement_vsf_task(timer_example_t)
000000  b570              PUSH     {r4-r6,lr}
;;;143    {
000002  460e              MOV      r6,r1
;;;144    
;;;145        int index = (timer_example_t *)ptThis - __timer_example;
000004  490e              LDR      r1,|L6.64|
000006  1a40              SUBS     r0,r0,r1
000008  2150              MOVS     r1,#0x50
00000a  f7fffffe          BL       __aeabi_idivmod
00000e  4604              MOV      r4,r0
;;;146        int delay = 2000 * (1 + index);
000010  1c45              ADDS     r5,r0,#1
000012  207d              MOVS     r0,#0x7d
000014  0100              LSLS     r0,r0,#4
000016  4345              MULS     r5,r0,r5
000018  3eff              SUBS     r6,r6,#0xff
00001a  1eb6              SUBS     r6,r6,#2
;;;147        user_msg_t *pmsg;
;;;148    
;;;149    	switch (evt) {
00001c  d00a              BEQ      |L6.52|
00001e  2e04              CMP      r6,#4
000020  d10b              BNE      |L6.58|
;;;150        case VSF_EVT_TIMER:
;;;151            printf("%d: timer post\r\n ", index);
000022  4621              MOV      r1,r4
000024  a007              ADR      r0,|L6.68|
000026  f7fffffe          BL       __2printf
;;;152    #if VSF_CFG_BMPEVT_EN == ENABLED
;;;153            set_grouped_evts( &__user_grouped_evts,  1 << (index + timer0_evt_idx));
00002a  2101              MOVS     r1,#1
00002c  40a1              LSLS     r1,r1,r4
00002e  480a              LDR      r0,|L6.88|
000030  f7fffffe          BL       vsf_eda_bmpevt_set
                  |L6.52|
;;;154    #endif
;;;155        case VSF_EVT_INIT:
;;;156            vsf_teda_set_timer_ms(delay);
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       vsf_teda_set_timer_ms
                  |L6.58|
;;;157            break;
;;;158    	}
;;;159    
;;;160        return fsm_rt_wait_for_evt;
00003a  2002              MOVS     r0,#2
;;;161    }
00003c  bd70              POP      {r4-r6,pc}
;;;162    #endif
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      ||.bss.noinit||+0x460
                  |L6.68|
000044  25643a20          DCB      "%d: timer post\r\n ",0
000048  74696d65
00004c  7220706f
000050  73740d0a
000054  2000    
000056  00                DCB      0
000057  00                DCB      0
                  |L6.88|
                          DCD      ||.bss.noinit||+0x658

                          AREA ||i.vsf_task_func_user_pt_bmpevt_demo_slave_t||, CODE, READONLY, ALIGN=2

                  vsf_task_func_user_pt_bmpevt_demo_slave_t PROC
;;;212    
;;;213    static implement_vsf_pt(user_pt_bmpevt_demo_slave_t)
000000  b510              PUSH     {r4,lr}
;;;214    {
000002  4604              MOV      r4,r0
;;;215        vsf_pt_begin();
000004  7800              LDRB     r0,[r0,#0]
000006  2800              CMP      r0,#0
000008  d004              BEQ      |L7.20|
00000a  2801              CMP      r0,#1
00000c  d004              BEQ      |L7.24|
00000e  2802              CMP      r0,#2
000010  d126              BNE      |L7.96|
000012  e012              B        |L7.58|
                  |L7.20|
;;;216        
;;;217        vsf_pt_wait_until(
000014  2001              MOVS     r0,#1
000016  7020              STRB     r0,[r4,#0]
                  |L7.24|
000018  6960              LDR      r0,[r4,#0x14]
00001a  6060              STR      r0,[r4,#4]
00001c  2000              MOVS     r0,#0
00001e  7220              STRB     r0,[r4,#8]
000020  2200              MOVS     r2,#0
000022  43d2              MVNS     r2,r2
000024  1d21              ADDS     r1,r4,#4
000026  6920              LDR      r0,[r4,#0x10]
000028  f7fffffe          BL       vsf_bmpevt_wait_for
00002c  2803              CMP      r0,#3
00002e  d110              BNE      |L7.82|
000030  a00c              ADR      r0,|L7.100|
000032  f7fffffe          BL       __2printf
;;;218            wait_for_one(this.pgroup_evts, this.mask){
;;;219                printf("get sem in pt slave thread\r\n");
;;;220            } 
;;;221        );
;;;222    
;;;223        vsf_pt_wait_until(
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
                  |L7.58|
00003a  207d              MOVS     r0,#0x7d
00003c  0100              LSLS     r0,r0,#4
00003e  f7fffffe          BL       vsf_systimer_ms_to_tick
000042  4601              MOV      r1,r0
000044  480f              LDR      r0,|L7.132|
000046  f7fffffe          BL       __vsf_sem_pend
00004a  2803              CMP      r0,#3
00004c  d003              BEQ      |L7.86|
00004e  2801              CMP      r0,#1
000050  d003              BEQ      |L7.90|
                  |L7.82|
000052  2002              MOVS     r0,#2
;;;224            vsf_sem_pend_timeout_ms(&user_sem, 2000){
;;;225                printf("get user sem in pt slave thread\r\n");
;;;226            }
;;;227            on_sem_timeout() {
;;;228                printf("get user sem TIMEOUT pt slave thread\r\n");
;;;229            }
;;;230        );
;;;231    
;;;232        vsf_pt_end();
;;;233    }
000054  bd10              POP      {r4,pc}
                  |L7.86|
000056  a00c              ADR      r0,|L7.136|
000058  e000              B        |L7.92|
                  |L7.90|
00005a  a014              ADR      r0,|L7.172|
                  |L7.92|
00005c  f7fffffe          BL       __2printf
                  |L7.96|
000060  2000              MOVS     r0,#0                 ;232
000062  bd10              POP      {r4,pc}
;;;234    
                          ENDP

                  |L7.100|
000064  67657420          DCB      "get sem in pt slave thread\r\n",0
000068  73656d20
00006c  696e2070
000070  7420736c
000074  61766520
000078  74687265
00007c  61640d0a
000080  00      
000081  00                DCB      0
000082  00                DCB      0
000083  00                DCB      0
                  |L7.132|
                          DCD      ||.bss.noinit||+0x5f0
                  |L7.136|
000088  67657420          DCB      "get user sem in pt slave thread\r\n",0
00008c  75736572
000090  2073656d
000094  20696e20
000098  70742073
00009c  6c617665
0000a0  20746872
0000a4  6561640d
0000a8  0a00    
0000aa  00                DCB      0
0000ab  00                DCB      0
                  |L7.172|
0000ac  67657420          DCB      "get user sem TIMEOUT pt slave thread\r\n",0
0000b0  75736572
0000b4  2073656d
0000b8  2054494d
0000bc  454f5554
0000c0  20707420
0000c4  736c6176
0000c8  65207468
0000cc  72656164
0000d0  0d0a00  
0000d3  00                DCB      0

                          AREA ||i.vsf_task_func_user_pt_bmpevt_demo_thread_t||, CODE, READONLY, ALIGN=2

                  vsf_task_func_user_pt_bmpevt_demo_thread_t PROC
;;;236    
;;;237    static implement_vsf_pt(user_pt_bmpevt_demo_thread_t)
000000  b570              PUSH     {r4-r6,lr}
;;;238    {
000002  4604              MOV      r4,r0
;;;239        vsf_pt_begin();
000004  7800              LDRB     r0,[r0,#0]
;;;240    
;;;241        while (1) {
;;;242        
;;;243            this.slave.mask = this.mask;
;;;244            this.slave.pgroup_evts = this.pgroup_evts;
;;;245            vsf_pt_call(user_pt_bmpevt_demo_slave_t, &this.slave);
;;;246                vsf_pt_on_call_return(fsm_rt_err) {
;;;247                    printf("error detected\r\n");
;;;248                }
;;;249        
;;;250            vsf_pt_wait_until(
;;;251                wait_for_one(this.pgroup_evts, this.mask){
;;;252                    printf("get sem in pt master thread\r\n");
;;;253                }
;;;254            );
;;;255            
;;;256            vsf_pt_wait_until(
000006  267d              MOVS     r6,#0x7d
000008  2500              MOVS     r5,#0                 ;239
00000a  0136              LSLS     r6,r6,#4
00000c  0003              MOVS     r3,r0                 ;239
00000e  f7fffffe          BL       __ARM_common_switch8
000012  0504              DCB      0x05,0x04
000014  0b1c2c42          DCB      0x0b,0x1c,0x2c,0x42
000018  5000              DCB      0x50,0x00
                  |L8.26|
00001a  6960              LDR      r0,[r4,#0x14]         ;243
00001c  62e0              STR      r0,[r4,#0x2c]         ;244
00001e  6920              LDR      r0,[r4,#0x10]         ;244
000020  62a0              STR      r0,[r4,#0x28]         ;245
000022  7625              STRB     r5,[r4,#0x18]         ;245
000024  2001              MOVS     r0,#1                 ;245
000026  7020              STRB     r0,[r4,#0]            ;245
000028  4621              MOV      r1,r4                 ;245
00002a  2201              MOVS     r2,#1                 ;245
00002c  3118              ADDS     r1,r1,#0x18           ;245
00002e  4822              LDR      r0,|L8.184|
000030  f7fffffe          BL       vsf_task_branch
000034  2801              CMP      r0,#1                 ;245
000036  d037              BEQ      |L8.168|
000038  2800              CMP      r0,#0                 ;245
00003a  d004              BEQ      |L8.70|
00003c  1c40              ADDS     r0,r0,#1              ;245
00003e  d102              BNE      |L8.70|
000040  a01e              ADR      r0,|L8.188|
000042  f7fffffe          BL       __2printf
                  |L8.70|
000046  2002              MOVS     r0,#2                 ;250
000048  7020              STRB     r0,[r4,#0]            ;250
00004a  6960              LDR      r0,[r4,#0x14]         ;250
00004c  6060              STR      r0,[r4,#4]            ;250
00004e  7225              STRB     r5,[r4,#8]            ;250
000050  2200              MOVS     r2,#0                 ;250
000052  43d2              MVNS     r2,r2                 ;250
000054  1d21              ADDS     r1,r4,#4              ;250
000056  6920              LDR      r0,[r4,#0x10]         ;250
000058  f7fffffe          BL       vsf_bmpevt_wait_for
00005c  2803              CMP      r0,#3                 ;250
00005e  d122              BNE      |L8.166|
000060  a01b              ADR      r0,|L8.208|
000062  f7fffffe          BL       __2printf
000066  2003              MOVS     r0,#3
000068  7020              STRB     r0,[r4,#0]
00006a  4630              MOV      r0,r6
00006c  f7fffffe          BL       vsf_systimer_ms_to_tick
000070  4601              MOV      r1,r0
000072  481f              LDR      r0,|L8.240|
000074  f7fffffe          BL       __vsf_sem_pend
000078  2803              CMP      r0,#3
00007a  d002              BEQ      |L8.130|
00007c  2801              CMP      r0,#1
00007e  d002              BEQ      |L8.134|
000080  e011              B        |L8.166|
                  |L8.130|
000082  a01c              ADR      r0,|L8.244|
000084  e000              B        |L8.136|
                  |L8.134|
000086  a024              ADR      r0,|L8.280|
                  |L8.136|
000088  f7fffffe          BL       __2printf
;;;257                vsf_sem_pend_timeout_ms(&user_sem, 2000){
;;;258                    printf("get user sem in pt master thread\r\n");
;;;259                }
;;;260                on_sem_timeout() {
;;;261                    printf("get user sem TIMEOUT pt master thread\r\n");
;;;262                }
;;;263            );
;;;264            
;;;265            printf("delay start...\r\n");
00008c  a02c              ADR      r0,|L8.320|
00008e  f7fffffe          BL       __2printf
;;;266            vsf_pt_wait_until(
000092  2004              MOVS     r0,#4
000094  7020              STRB     r0,[r4,#0]
000096  4630              MOV      r0,r6
000098  f7fffffe          BL       vsf_systimer_ms_to_tick
00009c  f7fffffe          BL       __vsf_delay
0000a0  1fc1              SUBS     r1,r0,#7
0000a2  39fe              SUBS     r1,r1,#0xfe
0000a4  d001              BEQ      |L8.170|
                  |L8.166|
0000a6  2002              MOVS     r0,#2
                  |L8.168|
;;;267                vsf_delay_ms(2000) {
;;;268                    printf("delay completed...\r\n");
;;;269                }
;;;270            );
;;;271        }
;;;272    
;;;273        vsf_pt_end();
;;;274    }
0000a8  bd70              POP      {r4-r6,pc}
                  |L8.170|
0000aa  a02a              ADR      r0,|L8.340|
0000ac  f7fffffe          BL       __2printf
0000b0  e7b3              B        |L8.26|
0000b2  2000              MOVS     r0,#0                 ;273
0000b4  bd70              POP      {r4-r6,pc}
;;;275    #endif
                          ENDP

0000b6  0000              DCW      0x0000
                  |L8.184|
                          DCD      vsf_task_func_user_pt_bmpevt_demo_slave_t
                  |L8.188|
0000bc  6572726f          DCB      "error detected\r\n",0
0000c0  72206465
0000c4  74656374
0000c8  65640d0a
0000cc  00      
0000cd  00                DCB      0
0000ce  00                DCB      0
0000cf  00                DCB      0
                  |L8.208|
0000d0  67657420          DCB      "get sem in pt master thread\r\n",0
0000d4  73656d20
0000d8  696e2070
0000dc  74206d61
0000e0  73746572
0000e4  20746872
0000e8  6561640d
0000ec  0a00    
0000ee  00                DCB      0
0000ef  00                DCB      0
                  |L8.240|
                          DCD      ||.bss.noinit||+0x5f0
                  |L8.244|
0000f4  67657420          DCB      "get user sem in pt master thread\r\n",0
0000f8  75736572
0000fc  2073656d
000100  20696e20
000104  7074206d
000108  61737465
00010c  72207468
000110  72656164
000114  0d0a00  
000117  00                DCB      0
                  |L8.280|
000118  67657420          DCB      "get user sem TIMEOUT pt master thread\r\n",0
00011c  75736572
000120  2073656d
000124  2054494d
000128  454f5554
00012c  20707420
000130  6d617374
000134  65722074
000138  68726561
00013c  640d0a00
                  |L8.320|
000140  64656c61          DCB      "delay start...\r\n",0
000144  79207374
000148  6172742e
00014c  2e2e0d0a
000150  00      
000151  00                DCB      0
000152  00                DCB      0
000153  00                DCB      0
                  |L8.340|
000154  64656c61          DCB      "delay completed...\r\n",0
000158  7920636f
00015c  6d706c65
000160  7465642e
000164  2e2e0d0a
000168  00      
000169  00                DCB      0
00016a  00                DCB      0
00016b  00                DCB      0

                          AREA ||i.vsf_thread_user_task_t_entry||, CODE, READONLY, ALIGN=2

                  vsf_thread_user_task_t_entry PROC
;;;182    #if VSF_USE_KERNEL_THREAD_MODE == ENABLED
;;;183    implement_vsf_thread(user_task_t) 
000000  257d              MOVS     r5,#0x7d
;;;184    {
000002  4604              MOV      r4,r0
;;;185    
;;;186        /*! you can define your own code region and use them */
;;;187        static const code_region_t user_region = {
;;;188            NULL,
;;;189            (i_code_region_t *)&__example_code_region,
;;;190        };
;;;191    /*
;;;192        code_region(&user_region){
;;;193            printf("\tbody\r\n");
;;;194        }
;;;195    */
;;;196        while (1) {
;;;197    #if VSF_CFG_TIMER_EN
;;;198            vsf_delay_ms(1000);
000004  00ed              LSLS     r5,r5,#3
                  |L9.6|
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       vsf_systimer_ms_to_tick
00000c  f7fffffe          BL       __vsf_delay
;;;199    #endif
;;;200            printf("user_thread post user sem:\r\n");
000010  a003              ADR      r0,|L9.32|
000012  f7fffffe          BL       __2printf
;;;201    #if VSF_CFG_SYNC_EN
;;;202            vsf_sem_post(this.psem);
000016  6de0              LDR      r0,[r4,#0x5c]
000018  f7fffffe          BL       vsf_eda_sync_increase
00001c  e7f3              B        |L9.6|
;;;203    #endif
;;;204        }
;;;205    }
;;;206    #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L9.32|
000020  75736572          DCB      "user_thread post user sem:\r\n",0
000024  5f746872
000028  65616420
00002c  706f7374
000030  20757365
000034  72207365
000038  6d3a0d0a
00003c  00      
00003d  00                DCB      0
00003e  00                DCB      0
00003f  00                DCB      0

                          AREA ||i.vsf_thread_user_task_t_start||, CODE, READONLY, ALIGN=2

                  vsf_thread_user_task_t_start PROC
;;;182    #if VSF_USE_KERNEL_THREAD_MODE == ENABLED
;;;183    implement_vsf_thread(user_task_t) 
000000  b510              PUSH     {r4,lr}
000002  2301              MOVS     r3,#1
000004  4602              MOV      r2,r0
000006  029b              LSLS     r3,r3,#10
000008  18c0              ADDS     r0,r0,r3
00000a  4c03              LDR      r4,|L10.24|
00000c  6384              STR      r4,[r0,#0x38]
00000e  6402              STR      r2,[r0,#0x40]
000010  8783              STRH     r3,[r0,#0x3c]
000012  f7fffffe          BL       vsf_thread_start
000016  bd10              POP      {r4,pc}
;;;184    {
                          ENDP

                  |L10.24|
                          DCD      vsf_thread_user_task_t_entry

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  __local_cb__LINE__
                          %        12

                          AREA ||.bss.noinit||, DATA, NOINIT, ALIGN=3

                  __user_task
                          %        1120
                  __timer_example
                          %        400
                  user_sem
                          %        16
                  __bmevt_demo
                          %        88
                  __user_grouped_evts
                          %        28

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  __example_code_region
                          DCD      0x00000000
                          DCD      __code_region_example_on_enter
                          DCD      __code_region_example_on_leave

                          AREA ||area_number.16||, DATA, READONLY, ALIGN=2

                          EXPORTAS ||area_number.16||, ||.constdata||
                          DCD      vsf_task_func_bmevt_demo_t
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      vsf_task_func_user_pt_bmpevt_demo_thread_t
                          DCD      0xffffffff
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      vsf_task_func_timer_example_t
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000000

                          AREA ||.data||, DATA, ALIGN=2

                  ||<Data1>||
                          DCD      vsf_eda_bmpevt_adapter_sync_op
                          DCD      0x00000020
                          DCD      0x00000000
                          %        36
                          DCD      user_sem

                          AREA ||area_number.18||, DATA, ALIGN=3

                          EXPORTAS ||area_number.18||, ||.data||
                  __adapters_of_user_grouped_evts_t
                          DCD      ||<Data1>||
                  ptThis
                          DCD      __local_cb__LINE__
                  __pt_demo
                          DCD      0x00000000
                          DCD      0x00000000
                          %        28
                          DCD      0x00000000
                          %        28
                          DCD      0x00000000
000050  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
000058  00000000          DCB      0x00,0x00,0x00,0x00
                          DCD      0x00000000
                          DCD      __user_grouped_evts
                          DCD      0x00000010
                          %        24

                          AREA ||i.__ARM_common_switch8||, COMGROUP=__ARM_common_switch8, CODE, READONLY, ALIGN=1

                  __ARM_common_switch8 PROC
000000  b430              PUSH     {r4,r5}
000002  4674              MOV      r4,lr
000004  1e64              SUBS     r4,r4,#1
000006  7825              LDRB     r5,[r4,#0]
000008  1c64              ADDS     r4,r4,#1
00000a  42ab              CMP      r3,r5
00000c  d200              BCS      |L67.16|
00000e  461d              MOV      r5,r3
                  |L67.16|
000010  5d63              LDRB     r3,[r4,r5]
000012  005b              LSLS     r3,r3,#1
000014  18e3              ADDS     r3,r4,r3
000016  bc30              POP      {r4,r5}
000018  4718              BX       r3
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\usrapp\\template\\main_full_feature_demo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___24_main_full_feature_demo_c_7c18c0c9____REV16|
#line 468 "..\\..\\..\\vsf\\utilities\\compiler\\arm\\CMSIS\\Core\\Include\\cmsis_armcc.h"
|__asm___24_main_full_feature_demo_c_7c18c0c9____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___24_main_full_feature_demo_c_7c18c0c9____REVSH|
#line 483
|__asm___24_main_full_feature_demo_c_7c18c0c9____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
